(define (domain marine-domain-7)

	(:requirements :equality :typing :probabilistic-effects)

	(:types None)

	(:predicates
		(has-object ?x - None) ;Group 1
		(found-object ?x - None) ;Group 1
		(found-mine ?x - None) ;Group 2
		(at-drop-off ?x - None) ;Group 1
		(found-target-to-report ?x - None) ;Group 3
		(in-comms-range ?x - None) ;Group 3
		;(garbage ?x - None)
	)

	(:action pick-up

		:parameters (?x - None)
		:precondition (and (found-object ?x) (not (has-object ?x)))
		:effect (probabilistic 0.7 (and (has-object ?x) (not (found-object ?x)) )
							   0.3 (and (has-object ?x) (increase reward -1))
				)
	)

	(:action drop-off

		:parameters (?x - None)
		:precondition (and (has-object ?x) (at-drop-off ?x))
		:effect (probabilistic 0.65 (and (not (has-object ?x)) (increase reward 4))
							   0.35 (and (has-object ?x))
				)

	)

	(:action disarm

		:parameters (?x - None)
		:precondition (found-mine ?x)
		:effect (probabilistic 0.75 (and (increase reward 4) (not (found-mine ?x)))
							   0.25 (and (has-object ?x))
				)
	)

	(:action go-to-comms

		:parameters (?x - None)
		:precondition (and (not (in-comms-range ?x)) (found-target-to-report ?x))
		:effect (in-comms-range ?x)
	)

	(:action go-to-drop-off

		:parameters (?x - None)
		:precondition (and (has-object ?x) (not (at-drop-off ?x)))
		:effect (at-drop-off ?x)
	)

	(:action explore

		:parameters (?x - None)
		:precondition (and (not (has-object ?x)) (not (found-mine ?x)) (not (found-target-to-report ?x)))
		:effect (probabilistic 0.2 (found-target-to-report ?x)
							   0.15 (found-object ?x)
							   0.1 (found-mine ?x) ;what about mine-live?
							   0.55 (has-object ?x)
				)
	)

	(:action report

		:parameters (?x - None)
		:precondition (and (found-target-to-report ?x) (in-comms-range ?x))
		:effect (and (not (found-target-to-report ?x)) (increase reward 1))
	)
	
	; ??? Look at IROS necessities doc for other actions, and add them here
	; test one by one

	; Next check by running with method and debug any issues with conditions expecting parameters always

	; Get a reward from this probabilistic domain

	; make deterministic version of this domain so pddl

	; run with method and get a reward from that

	; goal for tonight: compare rewards for prob and det domain

	; After: revisit simplification code (add BT conversion)

)